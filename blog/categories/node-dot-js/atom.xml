<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | Michel P. Macedo]]></title>
  <link href="http://michelpm.com/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://michelpm.com/"/>
  <updated>2013-07-26T14:44:02-03:00</updated>
  <id>http://michelpm.com/</id>
  <author>
    <name><![CDATA[Michel Pavan Macedo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iterating Collections In JavaScript]]></title>
    <link href="http://michelpm.com/blog/2012/09/10/iterating-collections-in-javascript/"/>
    <updated>2012-09-10T18:30:00-03:00</updated>
    <id>http://michelpm.com/blog/2012/09/10/iterating-collections-in-javascript</id>
    <content type="html"><![CDATA[<p>When I iterate in any language, I like to have a list of somethings to iterate because I can use more idiomatic code and have more explicit initial state, state changes and exit conditions. Most languages have a slightly different for/foreach that iterates over things that are considered enumerable by the language. In JavaScript we have two types of enumerable objects: array-like objects, also known as collections or simply arrays; and objects, also known as object hashes or associative arrays, even though they are just any JavaScript object that is used for that purpose.</p>

<!--more-->


<h2>Control Structures</h2>

<h3>Arrays</h3>

<p>In Javascript (ES6) there is a <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...of">for..of</a> structure to iterate over arrays, but it is not safe to use it in browsers just yet.</p>

<p><code>javascript
var arr = [1, 2, 3];
// for
for (var i = 0; i &lt; arr.length; ++i) {
  foo(arr[i]);
}
// for..of
for (var i of arr) {
  foo(i);
}
</code></p>

<p>In CoffeeScript you can use the for..in for that. It will generate a regular <code>for</code>, so unlike it is JavaScript counterpart, it is safe.</p>

<p>``` coffeescript for..in
arr = [1..3]</p>

<h3>for</h3>

<p>for i in [0&hellip;arr.length]
  foo arr[i]</p>

<h3>for..in</h3>

<p>for i in arr
  foo i
```</p>

<h3>Objects</h3>

<p>In JavaScript there is a well supported structure to iterate on the properties of a object. It is called <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...in">for..in</a>.</p>

<p><code>javascript
var obj = { a: 'a', b: 'b' };
for (var key in obj) {
  foo(obj[key]);
}
</code></p>

<p>In CoffeeScript you use the for..of for that. Yes, that is right, CoffeeScript uses &ldquo;for..in&rdquo; for arrays and &ldquo;for..of&rdquo; for objects, exactly the opposite of JavaScript. If you think about it, the CoffeeScript way sounds better.</p>

<p><code>coffeescript for..of
obj = a: 'a', b: 'b'
for key, val of obj
  foo val
</code></p>

<p>The problem is that it returns also inherited properties, to solve that you can either use <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">hasOwnProperty</a> if in a browser or <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">getOwnPropertyNames</a>/<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys">Object.keys</a> (both ES5).</p>

<p>``` javascript
var obj = { a: &lsquo;a&rsquo;, b: &lsquo;b&rsquo; };
// for..in
for (var key in obj) {
  if ({}.hasOwnProperty.apply(obj, [key])) {</p>

<pre><code>foo(obj[key]);
</code></pre>

<p>  }
}
// Object.keys
var keys = Object.keys(obj);
for (var i = 0; i &lt; keys.length; ++i) {
  foo(obj[keys[i]]);
}
```</p>

<p>But CoffeeScript has its own syntax that calls this function (the <code>own</code> keyword).</p>

<p><code>coffeescript for..own..of
obj = a: 'a', b: 'b'
for own key, val of obj
  foo val
</code></p>

<h2>Functional Style</h2>

<h3>JavaScript</h3>

<p>ES5 added the <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach">forEach</a> function for arrays only.</p>

<p><code>coffeescript forEach
[1..3].forEach (value, index, array) -&gt;
  foo value
</code></p>

<h3>Libraries</h3>

<p>``` coffeescript Several libraries
arr = [1..3]
obj = a: &lsquo;a&rsquo;, b: &lsquo;b&rsquo;</p>

<h3>jQuery</h3>

<p>$.each arr, (index, value) &ndash;>
  foo value
$.each obj, (key, value) &ndash;>
  foo value
$(arr).each (index, value) &ndash;>
  foo value
$(obj).each (key, value) &ndash;>
  foo value</p>

<h3>Underscore.js or Lo-Dash (alias: forEach)</h3>

<p><em>.each arr, (value, index, arr) &ndash;>
  foo value
</em>.each obj, (value, key, obj) &ndash;>
  foo value
<em>(arr).each (value, index, arr) &ndash;>
  foo value
</em>(obj).each (value, key, obj) &ndash;>
  foo value
```</p>

<h3>CoffeeScript Comprehensions</h3>

<p>Some people may care that function calls add a lot of overhead, others may argue that functions are always worse than a more idiomatic approach, if available. The more idiomatic approach that CoffeeScript offers is comprehensions, that is basically the traditional control structures in a postfixed notation.</p>

<p>``` coffeescript Comprehensions
arr = [1..3]</p>

<h1>for</h1>

<p>foo arr[i] for i in [0&hellip;arr.length]</p>

<h1>for..in</h1>

<p>foo i for i in arr</p>

<p>obj = a: &lsquo;a&rsquo;, b: &lsquo;b&rsquo;</p>

<h1>for..of</h1>

<p>foo val for own key, val of obj</p>

<h1>Bonus tracks: while/until</h1>

<p>doSomething() while somethingIsTrue()
doSomething() until somethingIsTrue()
```</p>
]]></content>
  </entry>
  
</feed>
