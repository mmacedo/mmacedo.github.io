---
layout: post
title: Twitter Bootstrap and JRuby on Rails
categories: twitter-bootstrap jruby rails less
comments: true
---

[Twitter Bootstrap](http://twitter.github.com/bootstrap/) is published in [LESS](http://lesscss.org/) and that is how I like to use it. The [twitter-bootstrap-rails](https://github.com/seyhunak/twitter-bootstrap-rails) gem is the most popular and most complete for that purpose. It has several handy generators and helpers. But I can't for my life install it on [JRuby](http://jruby.org/). Since I don't like forking, I found a somewhat simple workaround.

## Bootstrap files

If you are like me and want to keep the bootstrap files vendor'ed (included in asset pipeline by the vendor folder of a gem), you could use the 'static' branch of the twitter-bootstrap-rails gem, but that is the generated CSS, not LESS. It is bad because it doesn't have all stuff 'master' has and if you want to use a [theme](http://bootswatch.com/), it won't work.

The solution is to use the [less-rails-bootstrap](https://github.com/metaskills/less-rails-bootstrap) gem, the only thing it does is to require [less-rails](https://github.com/metaskills/less-rails) and vendor the original files. Now we don't have all the stuff from the other gem, to get it back see below.

## Require assets

It must be installed manually, it is pretty straightforward to do so. I use them like below.

``` scss app/assets/stylesheets/application.css.less
//= require_tree .
```

``` scss app/assets/stylesheets/bootstrap_and_overrides.css.less
@import "twitter/bootstrap/bootstrap";
@import "twitter/bootstrap/responsive";

// Set the correct sprite paths
@iconSpritePath: asset-path("twitter/bootstrap/glyphicons-halflings.png");
@iconWhiteSpritePath: asset-path("twitter/bootstrap/glyphicons-halflings-white.png");

body { padding-top: 60px; }
```

``` coffeescript app/assets/javascripts/application.js.coffee
#= require twitter/bootstrap
#= require jquery
#= require jquery_ujs
#= require_tree .
```

## Generate layout

``` bash
# Remove the erubis layout generated by Rails
git rm app/views/layouts/application.html.erb

# Download HAML layout (it is a erubis template)
LayoutErubis=$(curl https://raw.github.com/seyhunak/twitter-bootstrap-rails/master/lib/generators/bootstrap/layout/templates/layout.html.haml)

# Concatenate code to set the local variables and execute it
(echo "app_name='MyApp';layout_type='fixed';container_class='container'"
 (echo $LayoutErubis | erubis -x)
 echo "puts _buf.to_s"
) | ruby > app/views/layouts/application.html.haml
```

Replace 'MyApp' with the name of your app, it is the text the will be used in the logo and title areas. If you want to generate a fluid layout replaced 'fixed' with 'fluid' and 'container' with 'container-fluid'. For more details, look at [the code of the generator itself](https://github.com/seyhunak/twitter-bootstrap-rails/blob/master/lib/generators/bootstrap/layout/layout_generator.rb).

## Include helpers

It won't work. But that is good, because it means presentation logic needed to use several Twitter Bootstrap components is available as helpers. Except we don't have those helpers. So let's go back to their repository and get them as well.

``` bash
# Add remote
git remote add -f bsrails https://github.com/seyhunak/twitter-bootstrap-rails

# Fetch the branch, squash all changes into a single changeset, but don't commit
git merge -s ours --no-commit --squash bsrails/master

# Merge remote folder app/helpers (-u) into local folder app/helpers (--prefix)
git read-tree --prefix=app/helpers -u bsrails/master:app/helpers

# Commit (don't use -m your lazy bastard)
git commit
```

## Word of caution

This is a workaround. When the twitter-bootstrap-rails is able to install with JRuby, this is going to be useless.
